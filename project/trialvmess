#!/bin/bash

# Load Telegram configuration
source '/root/.vars'

# Valid Script
ipsaya=$(curl -sS ipv4.icanhazip.com)
data_server=$(curl -v --insecure --silent https://google.com/ 2>&1 | grep Date | sed -e 's/< Date: //')
date_list=$(date +"%Y-%m-%d" -d "$data_server")


    
# Colors
red="\e[91m"
green="\e[92m"
yellow="\e[93m"
blue="\e[94m"
purple="\e[95m"
cyan="\e[96m"
white="\e[97m"
reset="\e[0m"

# Function to send Telegram notification
send_telegram_notification() {
    local message="$1"
    if [[ -n "$bot_token" && -n "$telegram_id" ]]; then
        curl -s -X POST "https://api.telegram.org/bot$bot_token/sendMessage" \
            -d chat_id="$telegram_id" \
            -d text="$message" \
            -d parse_mode="HTML" > /dev/null 2>&1
    fi
}

# Function to print rainbow text
print_rainbow() {
    local text="$1"
    local length=${#text}
    local start_color=(255 255 0) # yellow
    local mid_color=(0 255 0)     # green
    local end_color=(255 255 0)   # yellow

    for ((i = 0; i < length; i++)); do
        local progress=$((i * 100 / (length - 1)))

        if [ $progress -lt 50 ]; then
            local factor=$((progress * 2))
            r=$((start_color[0] * (100 - factor) / 100 + mid_color[0] * factor / 100))
            g=$((start_color[1] * (100 - factor) / 100 + mid_color[1] * factor / 100))
            b=$((start_color[2] * (100 - factor) / 100 + mid_color[2] * factor / 100))
        else
            local factor=$(((progress - 50) * 2))
            r=$((mid_color[0] * (100 - factor) / 100 + end_color[0] * factor / 100))
            g=$((mid_color[1] * (100 - factor) / 100 + end_color[1] * factor / 100))
            b=$((mid_color[2] * (100 - factor) / 100 + end_color[2] * factor / 100))
        fi

        printf "\e[38;2;%d;%d;%dm%s" "$r" "$g" "$b" "${text:$i:1}"
    done
    echo -e "$reset"
}

# Variables
ip=$(wget -qO- ipv4.icanhazip.com)
srv_date=$(curl -v --insecure --silent https://google.com/ 2>&1 | grep Date | sed -e 's/< Date: //')
date=$(date +"%Y-%m-%d" -d "$srv_date")
ip_url="https://ip.yha.my.id/ip"
city=$(cat /etc/xray/city 2>/dev/null || echo "Unknown city")
pubkey=$(cat /etc/slowdns/server.pub 2>/dev/null || echo "Pubkey not available")
ns_domain=$(cat /etc/xray/dns 2>/dev/null || echo "NS domain not set")
domain=$(cat /etc/xray/domain 2>/dev/null || hostname -f)
uuid=$(cat /proc/sys/kernel/random/uuid)

# Loading animation
echo ""
echo -ne "${yellow}Preparing Premium Account${reset}"
for i in {1..2}; do
    for j in ⠋ ⠙ ⠹ ⠸ ⠼ ⠴ ⠦ ⠧ ⠇ ⠏; do
        echo -ne "\r${yellow}Preparing Premium Account $j${reset}"
        sleep 0.1
    done
done
echo -ne "\r${yellow}Premium Account Ready to be created!${reset}\n"
sleep 1
clear

# User data input
print_rainbow "┌─────────────────────────────────────────┐"
print_rainbow "│        Script by Alrescha79        │"
print_rainbow "│     Input xray/vmess account deps       │"
print_rainbow "│            Enter User Data              │"
print_rainbow "└─────────────────────────────────────────┘"

# Generate random username
user=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)

echo "   Username : $user"
until [[ $duration =~ ^[0-9]+$ ]]; do
    read -p "   Active period (minutes): " duration
    if [[ -z "$duration" ]]; then
        echo -e "${red}   Active period cannot be empty${reset}"
    fi
done

# Account creation process
exp=$(date -d "+$duration minutes" +"%Y-%m-%d %H:%M:%S")
if [ ! -f "/etc/xray/vmess/config.json" ]; then
    echo "Configuration file not found. Creating new file..."
    echo '{"inbounds": []}' > /etc/xray/vmess/config.json
fi

if ! sed -i '/#vmess$/a\### '"$user $exp"'\
},{"id": "'""$uuid""'","email": "'""$user""'"' /etc/xray/vmess/config.json; then
    echo -e "${red}Failed to add user to config.json${reset}"
    exit 1
fi
if ! sed -i '/#vmessgrpc$/a\### '"$user $exp"'\
},{"id": "'""$uuid""'","email": "'""$user""'"' /etc/xray/vmess/config.json; then
    echo -e "${red}Failed to add user to config.json (GRPC)${reset}"
    exit 1
fi

# Create configuration files
cat >/etc/xray/$user-tls.json <<EOF
{
    "v": "2",
    "ps": "$user WS (CDN) TLS",
    "add": "${domain}",
    "port": "443",
    "id": "${uuid}",
    "aid": "0",
    "net": "ws",
    "path": "/whatever/vmess",
    "type": "none",
    "host": "${domain}",
    "tls": "tls"
}
EOF

cat >/etc/xray/$user-non.json <<EOF
{
    "v": "2",
    "ps": "$user WS (CDN) NTLS",
    "add": "${domain}",
    "port": "80",
    "id": "${uuid}",
    "aid": "0",
    "net": "ws",
    "path": "/whatever/vmess",
    "type": "none",
    "host": "${domain}",
    "tls": "none"
}
EOF

cat >/etc/xray/$user-grpc.json <<EOF
{
    "v": "2",
    "ps": "$user (SNI) GRPC",
    "add": "${domain}",
    "port": "443",
    "id": "${uuid}",
    "aid": "0",
    "net": "grpc",
    "path": "vmess-grpc",
    "type": "none",
    "host": "${domain}",
    "tls": "tls"
}
EOF

# Generate Vmess links
tmux new-session -d -s "trial_vmess_$user" "trial trialws $user $duration"
vmess_tls="vmess://$(base64 -w 0 /etc/xray/$user-tls.json)"
vmess_non="vmess://$(base64 -w 0 /etc/xray/$user-non.json)"
vmess_grpc="vmess://$(base64 -w 0 /etc/xray/$user-grpc.json)"

# Restart service
if ! systemctl restart vmess@config; then
    echo -e "${red}Failed to restart vmess service${reset}"
    exit 1
fi

clear -x
print_rainbow "───────────────────────────"
print_rainbow "    Xray/Vmess Account     "
print_rainbow "───────────────────────────"
echo -e "Description : ${user}"
echo -e "Host Server : ${domain}"
echo -e "Host XrayDNS: ${ns_domain}"
echo -e "Location    : $city"
echo -e "TLS Port    : 443"
echo -e "Non-TLS Port: 80, 8080"
echo -e "DNS Port    : 443, 53"
echo -e "GRPC Port   : 443"
echo -e "AlterId     : 0"
echo -e "Security    : auto"
echo -e "Network     : WS or gRPC"
echo -e "Path        : /whatever/vmess "
echo -e "ServiceName : vmess-grpc"
echo -e "User ID     : ${uuid}"
echo -e "Public Key  : ${pubkey}"
print_rainbow "───────────────────────────"
echo -e "TLS Link   : ${vmess_tls}"
print_rainbow "───────────────────────────"
echo -e "NTLS Link  : ${vmess_non}"
print_rainbow "───────────────────────────"
echo -e "GRPC Link  : ${vmess_grpc}"
print_rainbow "───────────────────────────"
echo -e "Expires On : $exp"

# Send Telegram notification for trial Vmess account
trial_message="
<b>🎯 TRIAL VMESS ACCOUNT</b>
<b>━━━━━━━━━━━━━━━━━━</b>
<b>📋 Trial Account Details:</b>
<b>👤 Description :</b> <code>$user</code>
<b>🌐 Host Server :</b> <code>$domain</code>
<b>🌐 Host XrayDNS :</b> <code>$ns_domain</code>
<b>📍 Location :</b> <code>$city</code>
<b>🔌 TLS Port :</b> <code>443</code>
<b>🔌 Non-TLS Port :</b> <code>80, 8080</code>
<b>🔌 DNS Port :</b> <code>443, 53</code>
<b>🔌 GRPC Port :</b> <code>443</code>
<b>🔢 AlterId :</b> <code>0</code>
<b>🔒 Security :</b> <code>auto</code>
<b>🌐 Network :</b> <code>WS or gRPC</code>
<b>🛣️ Path :</b> <code>/whatever/vmess</code>
<b>⚙️ ServiceName :</b> <code>vmess-grpc</code>
<b>🆔 User ID :</b> <code>$uuid</code>
<b>🔑 Public Key :</b> <code>$pubkey</code>
<b>━━━━━━━━━━━━━━━━━━</b>
<b>🔗 TLS Link :</b> <code>$vmess_tls</code>
<b>━━━━━━━━━━━━━━━━━━</b>
<b>🔗 NTLS Link :</b> <code>$vmess_non</code>
<b>━━━━━━━━━━━━━━━━━━</b>
<b>🔗 GRPC Link :</b> <code>$vmess_grpc</code>
<b>━━━━━━━━━━━━━━━━━━</b>
<b>⏰ Trial Duration :</b> <code>$duration minutes</code>
<b>📅 Expires On :</b> <code>$exp</code>
<b>━━━━━━━━━━━━━━━━━━</b>
<b>🎁 STATUS :</b> <b>TRIAL ACCOUNT CREATED</b>
"
send_telegram_notification "$trial_message"

echo -e ""
read -n 1 -s -r -p "Press [ Enter ] to back on menu"
menu